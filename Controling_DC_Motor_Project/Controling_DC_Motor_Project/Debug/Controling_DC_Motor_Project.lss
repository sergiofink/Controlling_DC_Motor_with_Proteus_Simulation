
Controling_DC_Motor_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000066  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000053c  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004bc  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e5  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002df  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000102b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	16 c0       	rjmp	.+44     	; 0x62 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#define   Motor   PB1

int main(void)
{
	DDRB |= (1<<Motor);  //PB1 output
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	82 60       	ori	r24, 0x02	; 2
  3c:	87 bb       	out	0x17, r24	; 23
	TCCR1B = (1<<CS10);  // Timer 1 is ON, prescaler is 1
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	8e bd       	out	0x2e, r24	; 46
	TCCR1A = (1<<WGM10) | (1<<WGM11) | (1<<COM1A1); //select PWM mode.
  42:	83 e8       	ldi	r24, 0x83	; 131
  44:	8f bd       	out	0x2f, r24	; 47
	
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADPS0); //Setting the ADC block
  46:	87 e8       	ldi	r24, 0x87	; 135
  48:	86 b9       	out	0x06, r24	; 6
	ADMUX = (1<<REFS1) | (1<<REFS0) |(1<<MUX0) |(1<<MUX2);
  4a:	85 ec       	ldi	r24, 0xC5	; 197
  4c:	87 b9       	out	0x07, r24	; 7
	
	while(1)
	{
		unsigned int ADC_result; //In this variable we will keep conversion result
		ADCSRA |= (1<<ADSC);    //Start conversion
  4e:	86 b1       	in	r24, 0x06	; 6
  50:	80 64       	ori	r24, 0x40	; 64
  52:	86 b9       	out	0x06, r24	; 6
		
		do{} while (ADCSRA & (1<<ADSC));
  54:	36 99       	sbic	0x06, 6	; 6
  56:	fe cf       	rjmp	.-4      	; 0x54 <__SREG__+0x15>
		ADC_result = ADC;
  58:	84 b1       	in	r24, 0x04	; 4
  5a:	95 b1       	in	r25, 0x05	; 5
		OCR1A = ADC_result;  //Here is stored the ADC value
  5c:	9b bd       	out	0x2b, r25	; 43
  5e:	8a bd       	out	0x2a, r24	; 42
	}
  60:	f6 cf       	rjmp	.-20     	; 0x4e <__SREG__+0xf>

00000062 <_exit>:
  62:	f8 94       	cli

00000064 <__stop_program>:
  64:	ff cf       	rjmp	.-2      	; 0x64 <__stop_program>
